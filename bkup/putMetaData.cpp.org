#include <iostream>
#include <string.h>

#include <sys/param.h>
#include <stdlib.h>

using namespace std;

const int MAX_FNAME = 256;
const int MAX_PATH	= 1024;

/* 
 ファイル名を指定するとディレクトリファイルに保管する
 -create_meta_data(“ファイル名);	
		・ディレクトリファイルに構造体配列を格納
		・構造体配列はいっぺんに展開する？
			・fleekでバラバラに読み込んだ方が良い（メモリから溢れるとまずい）？
			・そもそもファイル構造体を入れるファイルをそれぞれ作る？
			・まずは一つのファイルに全て記載して，速度を測る
			・探索も順位メンバを参照する
		・idでソートした方が探索が早い？（ソート時間は非同期にする？あとで？）
*/


/* 
手順: 
-ファイル名から絶対パスを取得
-パスからディレクトリファイルを作成
-ファイルの構造体を取得
-hashmapにファイル情報を格納(keyはファイル名のmd5)
=hashmap配列をシリアライズ化(メモリ展開サイズまで1Mほどが妥当？)）
-ファイルにシリアライズ化したバイナリを書き込む
-サイズが大きければファイルを分けて書き込み（DIR名+ファイル番号）
-ディレクトリファイルへ追記
*/

void get_fpath(char * q_name, char * fname, char * full_path);
void create_meta_data(char * q_name);
void get_full_path(char*q_name, char*full_path);

int main(int argc, char * argv[]){

	if(argc != 2){
		cerr << "Error : Need to specify a file name" << endl;
		return 0;
	}
	if(sizeof(argv[1]) > MAX_FNAME ) {
		cerr << "Error : File name is too long" << endl;
		return 0;
	}
	char * f_name = argv[1];
	
	create_meta_data(f_name);	
	
	return 0;
}


void create_meta_data(char * q_name){
	// ファイル名
	char fname[ MAX_FNAME ]={};
	// ディレクトリ名 
	char dir_path[ MAX_PATH ]={};
	// 絶対パス
	char full_path[ MAX_PATH ]={};

	// ファイルパス情報を取得	
	get_full_path(q_name, full_path);
	cout<<full_path<<endl;
	
	get_fname( full_path, fname);
	//get_fpath(q_name, fname, full_path , dir_path);

	
	//パスからディレクトリファイルを作成
	
	//ファイルの構造体を取得
	//hashmapにファイル情報を格納(keyはファイル名のmd5)
	//hashmap配列をシリアライズ化(メモリ展開サイズまで1Mほどが妥当？)）
	//ファイルにシリアライズ化したバイナリを書き込む
	//サイズが大きければファイルを分けて書き込み（DIR名+ファイル番号）
	//ディレクトリファイルへ追記
}


void get_full_path(char*q_name, char*full_path){
	if( realpath( q_name, full_path ) == NULL ){
		cerr<<"Error : File is not exist" << endl;
		exit(0);
	}
}

void get_fname(char*full_path, char*fname){
}

// フルパスとファイル名を取得
void get_fpath(char * q_name, char * fname, char * full_path){
	if( realpath( q_name, full_path ) == NULL ){
		cerr<<"Error : File is not exist" << endl;
		exit(0);
	}

	char tmppath[MAX_PATH]={};
	memcpy( tmppath, full_path, strlen(full_path) );

	char *tmp = strtok(tmppath,"/");
	while(strtok(NULL,"/") != NULL){
		tmp = strtok(NULL,"/");
	}

	memcpy( fname, tmp, strlen(tmp) );
	
	
}





